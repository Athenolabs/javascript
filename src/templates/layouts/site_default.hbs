<!DOCTYPE html>
<!--[if IE 7]>
<html class="ie ie7" lang="en-US">
<![endif]-->
<!--[if IE 8]>
<html class="ie ie8" lang="en-US">
<![endif]-->
<!--[if !(IE 7) | !(IE 8) ]><!-->
<html lang="en-US">
<!--<![endif]-->
	<head>
	<title>{{title}}</title>
	<link rel="profile" href="http://gmpg.org/xfn/11">
	<link rel="pingback" href="http://www.librelio.com/xmlrpc.php">
	<link rel="alternate" type="application/rss+xml" title="Librelio &raquo; Home Comments Feed" href="http://www.librelio.com/home-with-business-2/feed" />
<!-- Start from here need alteration -->
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.librelio.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.librelio.com/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='App Maker' href='http://www.librelio.com/app-maker' />
<link rel='next' title='Examples of iOS apps powered by Librelio' href='http://www.librelio.com/examples-of-ios-apps-powered-by-librelio' />
<link rel='canonical' href='http://www.librelio.com/' />
<link rel='shortlink' href='http://www.librelio.com/?p=104' />
<!-- End of alteration area -->
	<link rel="stylesheet" type="text/css" media="all" href="{{assets}}/css/style.css" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0"> 
		<meta charset="utf-8"> 
		<meta name="author" content="prettystrap"> 
<!-- Load Librelio -->
		<link id="the-story-css-file" href="{{assets}}/css/the-story.min.css" rel="stylesheet" media="screen">
        <link id="plans-and-pricing" href="{{assets}}/css/plans-and-pricing.css" rel="stylesheet" media="screen"> 
<!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
<!--[if lt IE 9]>
<script src="{{assets}}/lib/html5shiv/html5shiv.js"></script>
<script src="{{assets}}/lib/respond/respond.min.js"></script>
<![endif]-->
		<meta http-equiv="X-UA-Compatible" content="IE=edge"> 
	</head>
<!-- activate scrollspy -->
	<body id="top" data-spy="scroll" data-target=".navbar" data-offset="50">
<!-- navbar at top -->
{{> site_top_navbar }}

<!-- main-content -->
{{> body }}
<!-- #main-content -->

{{> site_footer }}
<script src="{{assets}}/lib/jquery.min.js"></script>
<!-- JQUERY END -->
<!-- Minimize in production. -->
<script src="{{assets}}/lib/bootstrap/js/bootstrap.min.js"></script>
<script src="{{assets}}/lib/lazyload.js"></script>
<script src="{{assets}}/lib/spin.js"></script>
<script src="{{assets}}/lib/bootbox.min.js"></script>
<script src="{{assets}}/lib/jquery.forms.min.js"></script>
<script src="{{assets}}/lib/lightbox.js"></script>
<script src="{{assets}}/lib/jquery.history.js"></script> 
<!-- Main js fail. -->
<script src="{{assets}}/js/main.js"></script>
<script>
// prepare the form when the DOM is ready 
$(document).ready(function() { 
    var options = { 
        target:        '#output2',   // target element(s) to be updated with server response 
        beforeSubmit:  showRequest,  // pre-submit callback 
        success:       showResponse, // post-submit callback 
        url:       'http://download.librelio.com/forms/submit.php' ,      // override for form's 'action' attribute 
 	    dataType:  'json',       // 'xml', 'script', or 'json' (expected server response type) 

        // other available options: 
        //type:      type        // 'get' or 'post', override for form's 'method' attribute 
        //dataType:  null        // 'xml', 'script', or 'json' (expected server response type) 
        //clearForm: true        // clear all form fields after successful submit 
        //resetForm: true        // reset the form after successful submit 
 
        // $.ajax options can be used here too, for example: 
        //timeout:   3000 
    }; 
 
    // bind to the form's submit event 
    $('form').submit(function() { 
        // inside event callbacks 'this' is the DOM element so we first 
        // wrap it in a jQuery object and then invoke ajaxSubmit 
        $(this).ajaxSubmit(options); 
        bootbox.alert("Thank you! We'll get back to you shortly");
 
        // !!! Important !!! 
        // always return false to prevent standard browser submit and page navigation 
        return false; 
    }); 
}); 
 
// pre-submit callback 
function showRequest(formData, jqForm, options) { 
    // formData is an array; here we use $.param to convert it to a string to display it 
    // but the form plugin does this for you automatically when it submits the data 
    var queryString = $.param(formData); 
 
    // jqForm is a jQuery object encapsulating the form element.  To access the 
    // DOM element for the form do this: 
    // var formElement = jqForm[0]; 
 
    //alert('About to submit: \n\n' + queryString); 
 
    // here we could return false to prevent the form from being submitted; 
    // returning anything other than false will allow the form submit to continue 
    return true; 
} 
 
// post-submit callback 
function showResponse(data)  { 
    // for normal html responses, the first argument to the success callback 
    // is the XMLHttpRequest object's responseText property 
 
    // if the ajaxSubmit method was passed an Options Object with the dataType 
    // property set to 'xml' then the first argument to the success callback 
    // is the XMLHttpRequest object's responseXML property 
 
    // if the ajaxSubmit method was passed an Options Object with the dataType 
    // property set to 'json' then the first argument to the success callback 
    // is the json data object returned by the server 
 	bootbox.alert(data.message);
} </script>
</body>
</html>
